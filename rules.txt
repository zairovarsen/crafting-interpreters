expression     -> assignment ;
assignment     -> (call "." )? IDENTIFIER "=" assignment | logical_or; 
logic_or -> logic_and ( "or" logic_and )* ;
logic_and -> equality ( "and" equality )* ;


equality       -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison     -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           -> factor ( ( "-" | "+" ) factor )* ;
factor         -> unary ( ( "/" | "*" ) unary )* ;
unary          -> ( "!" | "-" ) unary | call

call -> primary ( "(" arguments? ")" | "." IDENTIFER) * ;
arguments -> expression( "," expression )* ;

funDecl -> "function" func; 
func -> IDENTIFIER "(" parameters? ")" block;

primary        -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER | ternary ;
ternary        -> equality "?" expression ":" ternary ;
comma          -> ternary ( "," ternary )* ;

program -> declaration* EOF ;

declaration -> varDecl | statement | funDecl | classDecl;

classDecl -> "class" IDENTIFER "{" function* "}" ;
varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;
statement -> exprStmt | printStmt | block | ifStmt | whileStmt | forStmt | returnStmt;

returnStmt -> "return" expression? ";" ;
forStmt -> "for" "(" (varDecl | exprStmt | ";")
expression? ";" 
expression? ")" statement ;

whileStmt -> "while" "(" expression ")" statement ;
ifStmt -> "if" "(" expression ")" statement
("else" statement)? ;

block -> "{" declaration* "}" ;
exprStmt -> expression ";" ;
printStmt -> "print" expression ";" ;

function -> IDENTIFIER "(" parameters? ")" block;
parameters -> IDENTIFIER ( "," IDENTIFIER )* ; 
